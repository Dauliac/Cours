# -*- mode: ruby -*-
# vi: set ft=ruby :

# definition d'une list de dictionaire définissant les spécificités de chaque host
hosts= [
    { :hostname => "slave1", :ip => "192.168.56.41", :box => "centos/7" },
    { :hostname => "slave2", :ip => "192.168.56.42", :box => "debian/buster64" },
    { :hostname => "master", :ip => "192.168.56.43", :box => "debian/buster64" }
]

Vagrant.configure(2) do |config|
  # Configuration par défaut des vms
  config.vm.provider "virtualbox" do |virtbox|
    # utilisation des clones lié
    virtbox.linked_clone = true
    # 256 MB de ram et 1 cpu seulement
    virtbox.memory = 256
    virtbox.cpus = 1
    # non check des guest adition
    virtbox.check_guest_additions = false
  end
  # désactivation de la synchro du dossier courant dans /vagrant
  config.vm.synced_folder ".", "/vagrant", disabled: true
  # résupération du contenu de la clef publique
  ssh_pub_key = File.readlines("./id_rsa.pub").first.strip
  # loop sur les definitions de hosts
  hosts.each do |host|
    # une provision par defaut pour chaque host qui ajoute le host dans le fichier /etc/host des cibles si non présent
    config.vm.provision host[:hostname], type: "shell" do |cmd|
      cmd.inline = <<-SHELL
        grep -q "#{host[:hostname]}" /etc/hosts || echo "#{host[:ip]}  #{host[:hostname]}" >> /etc/hosts
      SHELL
    end
    # création des VM avec leur variable
    config.vm.define host[:hostname] do |target|
      target.vm.box = host[:box]
      target.vm.network "private_network", ip: host[:ip]
      target.vm.hostname = host[:hostname]
      # création du compte de la relation d'aprobation ssh et de authorisation sudo
      target.vm.provision "user", type: "shell" do |cmd|
        cmd.inline = <<-SHELL
          id cfg-master >/dev/null 2>&1 || useradd -m -G vagrant -s /bin/bash cfg-master
          touch -a /etc/sudoers.d/cfg-master
          grep -q "cfg-master ALL=(ALL:ALL) NOPASSWD: ALL" /etc/sudoers.d/cfg-master || echo "cfg-master ALL=(ALL:ALL) NOPASSWD: ALL" > /etc/sudoers.d/cfg-master
          test -d /home/cfg-master/.ssh || mkdir /home/cfg-master/.ssh
          chmod 700 /home/cfg-master/.ssh
          touch -a /home/cfg-master/.ssh/authorized_keys
          grep -q "#{ssh_pub_key}" /home/cfg-master/.ssh/authorized_keys || echo "#{ssh_pub_key}" >> /home/cfg-master/.ssh/authorized_keys
          chmod 600 /home/cfg-master/.ssh/authorized_keys
          chown -R cfg-master.cfg-master /home/cfg-master/.ssh
        SHELL
      end
      # surcharge des paramètres de VM pour master et création des provisions spécifique a master
      if host[:hostname] == "master" or host[:hostname] == "master2" then
        target.vm.provider "virtualbox" do |virtbox|
          virtbox.memory = "1024"
          virtbox.cpus = "2"
        end
        # depot de la clef (les provision file sont faites avec le compte vagrant, la destination doit être inscriptible pour le compte vagrant)
        target.vm.provision "privkey", type: "file", after: "user", source: "./id_rsa", destination: "/home/vagrant/.ssh/id_rsa"
        # livraison de la clef privé au bon endroit et gestion des droits (les provisions shell sont faites avec l'identité root)
        target.vm.provision "privkey2", type: "shell", after: "privkey" do |cmd|
          cmd.inline = <<-SHELL
            mv /home/vagrant/.ssh/id_rsa /home/cfg-master/.ssh/id_rsa
            chmod 600 /home/cfg-master/.ssh/id_rsa
            chown cfg-master.cfg-master /home/cfg-master/.ssh/id_rsa
            test -d /opt/src 2>/dev/null || /bin/mkdir /opt/src
            chgrp vagrant /opt/src
            chmod 775 /opt/src
          SHELL
        end
        target.vm.provision "installansible", type: "shell", run: "never" do |cmd|
          cmd.inline = <<-SHELL
            apt-get update --allow-releaseinfo-change
            apt-get -q2 install python3 python3-pip
            sudo su - cfg-master -c "pip3 install --user ansible"
          SHELL
        end
        target.vm.provision "testansible", type: "shell", run: "never" do |cmd|
          cmd.inline = <<-SHELL
          su - cfg-master -c "cd /opt/src ; ansible -m ping slaves"
          SHELL
        end
        # dépot des sources
        target.vm.synced_folder "./src", "/opt/src", 
          name: "sources", type: "rsync", after: "privkey2", rsync__args:  ["--verbose", "--archive", "--delete", "-z", "--links"]
      end
    end
  end
end
